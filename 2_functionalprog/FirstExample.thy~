theory FirstExample
(* imports theories (packages) *)
imports Main
begin

(* declarations *)
type_synonym NatType = nat

(* definitions *)
primrec multip :: "NatType \<Rightarrow> NatType \<Rightarrow> NatType"
  where m_zero: "multip 0 n = 0" |
        m_suc:  "multip (Suc m) n = n + multip m n"

(* proofs *)
lemma correctness: "multip m n = m * n"
  proof(induct m)
    case 0
    then show "multip 0 n = 0 * n" by simp
  next
    case (Suc m)
    assume "multip m n = m * n"
    then show "multip (Suc m) n = Suc m * n" 
      using m_suc by fastforce
  qed


lemma "(THE x. x = a) = a" by simp

lemma "(\<And>x::'a. (f x ::'b) = g x) \<Longrightarrow> (\<lambda>x. f x) = (\<lambda>x. g x)" by simp


end



(*

primrec rev :: "'a list \<Rightarrow> 'a list"
  where rev_Nil:  "rev [] = []" |
        rev_Cons: "rev (x # xs) = (rev xs) @ [x]"

value "rev [a,b,c,d,e]"

lemma rev_rev: "rev (rev xs) = xs"
proof(induct xs)
  case Nil
  then show ?case by simp
next
  case (Cons a xs)
  assume "rev (rev xs) = xs"
  then show ?case using rev_Cons sorry
qed

fun plus :: "int \<Rightarrow> int \<Rightarrow> int"
  where "plus x y = x + y"

value "plus 2 3"

lemma "plus x y = x + y"
  by auto*)
